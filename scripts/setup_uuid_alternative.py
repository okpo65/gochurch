#!/usr/bin/env python3
"""
Alternative UUID setup for databases that don't support uuid-ossp extension.
This script uses Python's uuid module instead of PostgreSQL's uuid_generate_v4().
"""

import sys
import os

# Add the current directory to Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from database import engine, Base
from sqlalchemy import text
from sqlalchemy.orm import sessionmaker

def test_uuid_support():
    """Test if the database supports UUID operations"""
    try:
        with engine.begin() as conn:
            # Try to create a simple table with UUID
            conn.execute(text("""
                CREATE TABLE IF NOT EXISTS uuid_test (
                    id UUID PRIMARY KEY,
                    name TEXT
                )
            """))
            
            # Try to insert a UUID
            conn.execute(text("""
                INSERT INTO uuid_test (id, name) 
                VALUES ('550e8400-e29b-41d4-a716-446655440000', 'test')
                ON CONFLICT (id) DO NOTHING
            """))
            
            # Clean up
            conn.execute(text("DROP TABLE IF EXISTS uuid_test"))
            
        print("‚úì Database supports UUID type")
        return True
    except Exception as e:
        print(f"‚ùå Database UUID support test failed: {e}")
        return False

def create_tables_without_extension():
    """Create tables without requiring uuid-ossp extension"""
    try:
        print("Creating tables without uuid-ossp extension...")
        Base.metadata.create_all(bind=engine)
        print("‚úì Tables created successfully")
        return True
    except Exception as e:
        print(f"‚ùå Table creation failed: {e}")
        return False

def main():
    print("Alternative UUID Setup")
    print("=" * 30)
    print("This script sets up the database without requiring the uuid-ossp extension.")
    print("UUIDs will be generated by Python instead of PostgreSQL.")
    print()
    
    # Test database connection
    try:
        with engine.connect() as conn:
            conn.execute(text("SELECT 1"))
        print("‚úì Database connection successful")
    except Exception as e:
        print(f"‚ùå Database connection failed: {e}")
        print("Please check your database configuration.")
        sys.exit(1)
    
    # Test UUID support
    if not test_uuid_support():
        print("Your database doesn't support UUID type.")
        print("Consider using PostgreSQL or updating your database.")
        sys.exit(1)
    
    # Create tables
    if not create_tables_without_extension():
        print("Failed to create tables.")
        sys.exit(1)
    
    print("\nüéâ Setup completed successfully!")
    print("\nNotes:")
    print("- UUIDs will be generated by Python's uuid.uuid4()")
    print("- No PostgreSQL extensions required")
    print("- All functionality should work normally")
    print("\nNext steps:")
    print("1. Run: python migrate_to_uuid_schema.py")
    print("2. Start the server: ./start.sh")
    print("3. Visit: http://localhost:8000/docs")

if __name__ == "__main__":
    main()
