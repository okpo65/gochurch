version: '3.8'

services:
  # Main PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: gochurch_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-fastapi_celery_db}
      POSTGRES_USER: ${DB_USER:-fastapi_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-fastapi_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - gochurch_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-fastapi_user} -d ${DB_NAME:-fastapi_celery_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Test PostgreSQL Database (Separate Instance)
  postgres_test:
    image: postgres:14-alpine
    container_name: gochurch_postgres_test
    environment:
      POSTGRES_DB: ${TEST_DB_NAME:-test_fastapi_celery_db}
      POSTGRES_USER: ${TEST_DB_USER:-fastapi_user}
      POSTGRES_PASSWORD: ${TEST_DB_PASSWORD:-fastapi_password}
    volumes:
      - postgres_test_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "${TEST_DB_PORT:-5433}:5432"
    networks:
      - gochurch_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${TEST_DB_USER:-fastapi_user} -d ${TEST_DB_NAME:-test_fastapi_celery_db}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - test
      - full

  # Redis for Main Application
  redis:
    image: redis:7-alpine
    container_name: gochurch_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - gochurch_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    command: redis-server --appendonly yes

  # FastAPI Application
  fastapi:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    container_name: gochurch_fastapi
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gochurch_network
    volumes:
      - ../config/alembic:/app/config/alembic
      - ../.env:/app/.env
    restart: unless-stopped
    command: sh -c "poetry install --only=main && poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --reload"

  # Celery Worker
  celery:
    build:
      context: ..
      dockerfile: ops/Dockerfile
    container_name: gochurch_celery
    environment:
      # Redis Configuration
      - REDIS_URL=redis://redis:6379/${REDIS_DB:-0}
      - CELERY_BROKER_URL=redis://redis:6379/${REDIS_DB:-0}
      - CELERY_RESULT_BACKEND=redis://redis:6379/${REDIS_DB:-0}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - gochurch_network
    volumes:
      - ../.env:/app/.env
    restart: unless-stopped
    command: sh -c "poetry install --only=main && poetry run celery -A workers.celery_app worker --loglevel=info"

volumes:
  postgres_data:
    driver: local
  postgres_test_data:
    driver: local
  redis_data:
    driver: local

networks:
  gochurch_network:
    driver: bridge
